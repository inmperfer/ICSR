;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ejercicio 1 ICSR
;; Analiza cómo afecta la probabilidad de añadir aristas al azar a las diversas medidas globales de centralidad de una red libre de escala
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; No pruebo con WS, porque no es lo que pide el ejercicio 1, WS se trata de recablear los nodos ya existente, no de añadir nuevas aristas
;; Usando el modelo Barabasi & Albert y Erdős-Rény
to ex1_p_aristas_ba-pa_er-rn
  clear
  no-display
  Measure_headers
  foreach (range 0 1 .01)
  [ [p] ->
    clear 
    BA-PA 300 2 1
    ER-RN 0 p
    compute-centralities
    print Measures_p p
  ]
end

;; Usando el modelo Erdős-Rény
to prob_aristas_er-rn
  clear
  no-display
  Measure_headers
  foreach (range 0 1 .01)
  [ [p] ->
    clear 
    ER-RN 300 p
    compute-centralities
    print Measures_p p
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ejercicio 2 ICSR
;; Analiza cómo varían el diámetro y longitud de camino medio según los parámetros de los diferentes modelos que ofrece la herramienta 
;; (por ejemplo, ¿cómo varían estos valores según el número de nodos de un grafo aleatorio para una probabilidad fija?)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Modelo Erdős-Rény en funcion del número de nodos
to ex2_er-rn_nodes
  clear
  no-display
  print ("Diameter Average-Path-Length probability nodes")
  foreach (range 2 1000 1)
  [ [n] ->
    clear
    no-display
    ER-RN n .47
    print (list diameter Average-Path-Length .47 n)
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Modelo Barabasi & Albert (BA-PA N m0 m)
;; N - Number of nodes 
;; m0 - Initial complete graph
;; m - Number of links in new nodes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Variando numero de nodos
to ex2_ba-pa_nodes
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial links")
  foreach (range 1 1000 1)
  [ [n] ->
    clear
    no-display
    BA-PA n 2 1
    print (list diameter Average-Path-Length n 2 1)
  ]
end


;; Variando el grafo inicial completo
to ex2_ba-pa_initial
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial links")
  foreach (range 2 700 1)
  [ [m0] ->
    clear
    no-display
    BA-PA 700 m0 1
    print (list diameter Average-Path-Length 700 m0 1)
  ]
end


;; Variando el numero de links
to ex2_ba-pa_links
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial links")
  foreach (range 1 500 1)
  [ [m] ->
    clear
    no-display
    BA-PA 500 2 m 
    print (list diameter Average-Path-Length 500 2 m)
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Modelo Watts & Strogatz (WS N k p)
;; N - Number of nodes
;; k - initial degree (even)
;; p - rewiring probability
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variando el numero de nodos
to ex2_ws_nodes
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial rewiring")
  foreach (range 2 1000 1)
  [ [n] ->
    clear
    no-display
    WS n 2 .6
    print (list diameter Average-Path-Length n 2 .6)
  ]
end


;; Variando la probabilidad de recableado
to ex2_ws_rewiring
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial rewiring")
  foreach (range 0 1 .001)
  [ [p] ->
    clear
    no-display
    BA-PA 500 2 1
    WS 0 1 p
    print (list diameter Average-Path-Length 0 1 p)
  ]
end


;; Variando el grado inicial
to ex2_ws_initial
  clear
  no-display
  print ("Diameter Average-Path-Length nodes initial rewiring")
  foreach (range 1 200 1)
  [ [i] ->
    clear
    no-display
    WS 700 i .6
    print (list diameter Average-Path-Length 700 i .6)
  ]
end

 
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
;; Ejercicio 3 ICSR  
;; Haz experimentos de infección de un virus haciendo uso de Spread para una familia de redes parametrizada, elegida por ti, 
;; e intenta concluir para qué valores de los parámetros se obtiene redes con mayor resistencia y redes con mayor permeabilidad.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
;; Spread N-mi ps pr pin Iter  

;; N-mi - Number of initial infected nodes 
;; ps - Probability of spread of infection/message 
;; pr - Probability of recovery / forgotten 
;; pin - Probability of inmunity after recovering 
;; Iter - Number of iterations

to infeccion_nodes
  print ("NoInfectados Infectados Inmunes Nodos Pinfeccion Precuperacion Pinmunidad Iteraciones Model")
  foreach (range 1 100 5)
  [ [i] -> 
    foreach (range 0 150 5)
    [ [n] -> 
      clear
      ER-RN 300 .01
      layout "spring"
      Spread n 0.3 0.3 0 i
      print (spread-summary-param n 0.3 0.3 0 i "ER")
    ]
  ]
end




to infeccion_ps
  print ("NoInfectados Infectados Inmunes Nodos Pinfeccion Precuperacion Pinmunidad Iteraciones Model")
  ;; Erdos Renyi
  foreach (range 0 1 0.05)
  [ [ps] -> 
    clear
    ER-RN 300 .01
    layout "spring"
    Spread 1 ps 0.3 0 10
    print (spread-summary-param 1 ps 0.3 0 10 "ER")
  ]
  
  ;; Barabasi & Albert
  foreach (range 0 1 0.05)
  [ [ps] -> 
    clear
    BA-PA 300 2 1
    layout "spring"
    Spread 1 ps 0.3 0 10
    print (spread-summary-param 1 ps 0.3 0 10 "BA")
  ]
  
  ;; Watts & Strogatz
  foreach (range 0 1 0.05)
  [ [ps] -> 
    clear
    WS 300 2 .01
    layout "spring"
    Spread 1 ps 0.3 0 10
    print (spread-summary-param 1 ps 0.3 0 10 "WS")
  ]
  
end



to infeccion_pr
  print ("NoInfectados Infectados Inmunes Nodos Pinfeccion Precuperacion Pinmunidad Iteraciones Model")
  
  ;; Erdos Renyi
  foreach (range 0 1 0.05)
  [ [pr] -> 
    clear
    ER-RN 300 .01
    layout "spring"
    Spread 1 0.3 pr 0 10
    print (spread-summary-param 1 0.3 pr 0 10 "ER")
  ]
  
  ;; Barabasi & Albert
  foreach (range 0 1 0.05)
  [ [pr] -> 
    clear
    BA-PA 300 2 1
    layout "spring"
    Spread 1 0.3 pr 0 10
    print (spread-summary-param 1 0.3 pr 0 10 "BA")
  ]
  
  ;; Watts & Strogatz
  foreach (range 0 1 0.05)
  [ [pr] -> 
    clear
    WS 300 2 .01
    layout "spring"
    Spread 1 0.3 pr 0 10
    print (spread-summary-param 1 0.3 pr 0 10 "WS")
  ]
end


to infeccion_pin
  print ("NoInfectados Infectados Inmunes Nodos Pinfeccion Precuperacion Pinmunidad Iteraciones Model")
  
  ;; Erdos Renyi
  foreach (range 0 1 0.05)
  [ [pin] -> 
    clear
    ER-RN 300 .01
    layout "spring"
    Spread 1 0.3 0.3 pin 10
    print (spread-summary-param 1 0.3 0.3 pin 10 "ER")
  ]
  
  ;; Barabasi & Albert
  foreach (range 0 1 0.05)
  [ [pin] -> 
    clear
    BA-PA 300 2 1
    layout "spring"
    Spread 1 0.3 0.3 pin 10
    print (spread-summary-param 1 0.3 0.3 pin 10 "BA")
  ]
  
  ;; Watts & Strogatz
  foreach (range 0 1 0.05)
  [ [pin] -> 
    clear
    WS 300 2 .01
    layout "spring"
    Spread 1 0.3 0.3 pin 10
    print (spread-summary-param 1 0.3 0.3 pin 10 "WS")
  ]
end

;-----------------------------------------------------------------------------------
;
; Write your scripts in this file
;
; Please, read the Info Tab for instructions...
;
;-----------------------------------------------------------------------------------

; You can add a comment starting with ";"
; First Script
to script1
  clear            ; Clear everything
  BA-PA 300 2 1    ; Create a Preferential Attatchment Network with 300 nodes
  layout "spring"  ; Draw it with a spring distribution
end

; Second script
; Foreach sample
to script2
  foreach (range 0 .01 .001)
  [ [p] -> 
    clear
    BA-PA 300 2 1
    ER-RN 0 p
    print diameter
  ]
end

; Third script
; Spread Dynamics sample
to script3
  clear
  ER-RN 300 .01
  layout "spring"
  repeat 10 
  [ Spread 1 0.3 0.3 0 50
    print spread-summary
  ]
end

; Fourth script
; Small World network sample
to script4
  clear
  foreach (range 10 50 10)
  [ [p] -> 
    clear
    WS p 4 0
    layout "circle"
  ]
end

; Fifth script
; Several repetitions for every value of the parameter sample
to script5 
  clear 
  foreach (range 0 .01 .001)
  [ [p] ->
    print p
    repeat 10
    [
      clear 
      BA-PA 300 2 1
      WS 0 1 p
      ;;ER-RN 0 p
      print diameter
    ]
  ]
end

; Sixth script
; Same as previous but storing and compputing mean of the 10 experiments 
;   for every probability value. After that, prints all the means and
;   draws the plot (p,dm)
to script6 
  clear 
  let ds []
  let ys []
  foreach (range 0 .01 .001)
  [ [p] ->
    repeat 10
    [
      clear 
      BA-PA 200 2 1
      ER-RN 0 p
      set ds store diameter ds
      print ds
    ]
    set ys store (mean ds) ys
    set ds [] 
  ]
  ;;print ys
  plotTable (range 0 .01 .001) ys
end